%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 227 362 373 515 
%%LanguageLevel: 2
%%Creator: CorelDRAW X8
%%Title: lung3.eps
%%CreationDate: Fri Jul 23 21:39:37 2021
%%DocumentProcessColors: Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X8 Version 18.1.0.661
/EpsFile true def
%%BeginResource: procset wCorel18Dict 18.0 0
/wCorel18Dict 300 dict def wCorel18Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparationLevel1 1 0 0 0
gsave setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not def
/ColorSeparation/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
InRipSeparation{true}{ColorSeparationLevel1}ifelse}ifelse}ifelse def
/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors
get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors
known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}
ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode/OnHost ne
InRipSeparation AdobeDistiller or and}bind}{false}ifelse def/DocGrayScaleSpace
[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace[/DeviceCMYK]def
/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[0.9637 1.0000 0.8241
]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116 div}bind{500 div}
bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[{dup 0.206897 ge{dup
dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul}bind{dup 0.206897
ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000 mul}bind{dup
0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.8241 mul}bind]
>>]def/validate_cie_colorspace_whitepoint{load dup aload pop/WhitePoint get 1
1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE where{pop
/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint/DocGrayScaleSpace xd
DocGrayScaleSpace aload pop begin pop/DecodeA where{pop DecodeA type/arraytype
eq{DecodeA aload pop/DecodeA exch def}if}if end}if/DocRgbSpaceCIE where{pop
/DocRgbSpaceCIE validate_cie_colorspace_whitepoint/DocRgbSpace xd}if
/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE validate_cie_colorspace_whitepoint
/DocCmykSpace xd}if}bd/set_rendering_intent{Level3{findcolorrendering{
/ColorRendering findresource setcolorrendering}{dup/DefaultColorRendering eq{
pop}{/ColorRendering findresource setcolorrendering}}ifelse}{pop}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}def}ifelse
/setcustomcolor where SeparationMode/OnHost ne and{pop}{/tint_cmyk_color{5 -1
roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{CurrentInkName_5 eq{4
index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse
/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}repeat 3 copy
min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd/safe_setcolorspace{dup
currentcolorspace eq{pop}{setcolorspace}ifelse}bd/safe_setoverprint{dup type
/booleantype eq{dup currentoverprint ne{setoverprint}{pop}ifelse}{1 eq
setoverprint}ifelse}bd/is_cmyk_channel_name{/channel_name xd channel_name/Cyan
eq channel_name/Magenta eq or channel_name/Yellow eq or channel_name/Black eq
or{true}{false}ifelse}bd/is_rgb_channel_name{/channel_name xd channel_name/Red
eq channel_name/Green eq or channel_name/Blue eq or{true}{false}ifelse}bd
/is_spot_channel_name{/channel_name xd channel_name is_cmyk_channel_name
channel_name is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse
}bd/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSeparationLevel1{convert_to_cmyk/color get aload pop setcmykcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_set_color{SeparationMode/OnHost eq{separate_color{/set_color dexec
true}{pop currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1
SetGry true}ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{
currentdict false}bd/convert_to_cmyk{currentdict}bd currentdict end def
/GrayscaleColorSpec ColorSpec 9 dict copy begin/names{/Black}def/num 1 def
/ColorModel/Grayscale def/ColorSpace DocGrayScaleSpace def/separate_color{
currentdict false SeparationMode/OnHost eq{SeparationPlateName/Black eq{
SeparateInColor{pop convert_to_cmyk true}{pop true}ifelse}if}if}bd
/convert_to_cmyk{0 0 0 color aload pop 1 exch sub create_cmyk_color}bd
currentdict end def/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin
/color exch 1 array astore def/ColorSpace DocGrayScaleSpace def currentdict end
}bd/RgbColorSpec ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3
def/ColorModel/Rgb def/ColorSpace DocRgbSpace def/separate_color{
convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{color aload pop
convert_rgb_to_cmyk create_cmyk_color}bd currentdict end def/create_rgb_color{
RgbColorSpec 9 dict copy begin 3 array astore/color exch def/ColorSpace
DocRgbSpace def currentdict end}bd/HsbColorSpec ColorSpec 9 dict copy begin
/names{/Hue/Saturation/Brightness}def/num 3 def/ColorModel/Hsb def/ColorSpace
DocRgbSpace def/separate_color{convert_to_cmyk/separate_color dexec}bd
/convert_to_cmyk{color aload pop hsb2rgb convert_rgb_to_cmyk create_cmyk_color
}bd/convert_to_rgb{color aload pop hsb2rgb create_rgb_color}bd currentdict end
def/create_hsb_color{HsbColorSpec 9 dict copy begin 3 array astore/color exch
def/ColorSpace DocRgbSpace def currentdict end}bd/CmykColorSpec ColorSpec 9
dict copy begin/names{/Cyan/Magenta/Yellow/Black}def/num 4 def/ColorModel/Cmyk
def/ColorSpace DocCmykSpace def/separate_color{currentdict false
SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{color
SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0 4
SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/set_color{ColorSeparationLevel1{color aload pop get_cmyk_alternative_color
/color get aload pop names aload pop findcmykcustomcolor exch setcustomcolor}{
ColorSpace safe_setcolorspace color aload pop setcolor}ifelse}bd
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}{0 0 0 1 create_cmyk_color}ifelse}ifelse}ifelse}bd
/get_cmyk_alternative_color{/alternativeSpace ColorSpace 2 get def
alternativeSpace DocCmykSpace eq{alternativeColor aload pop create_cmyk_color}
{alternativeSpace DocRgbSpace eq{alternativeColor aload pop create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{alternativeColor
aload pop create_grayscale_color/convert_to_cmyk dexec}{0 0 0 1
create_cmyk_color}ifelse}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/set_color{ColorSeparationLevel1{DocGrayScaleSpace
safe_setcolorspace color aload pop 1 exch sub setcolor}{ColorSpace
safe_setcolorspace color aload pop setcolor}ifelse}bd/separate_color{
SeparateInColor{convert_to_cmyk true}{color aload pop 1 exch sub
create_grayscale_color true}ifelse}bd/convert_to_cmyk{color aload pop dup dup
dup create_cmyk_color}bd currentdict end def/create_registration_color{
RegistrationColorSpec 9 dict copy begin 1 array astore/color xd currentdict end
}bd/LabColorSpec ColorSpec 9 dict copy begin/names{/L/a/b}def/num 3 def
/ColorModel/Lab def/ColorSpace DocLabSpace def/separate_color{convert_to_cmyk
/separate_color dexec}bd/convert_to_cmyk{0 0 0 0 create_cmyk_color}bd
currentdict end def/create_lab_color{LabColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocLabSpace def currentdict end}bd
/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd}bd
/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/setcmykcolor{create_cmyk_color
/separate_set_color dexec/$ffpnt xd}bd/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel18Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
227.81225 362.35701 372.60227 514.82013 @E
/$fm 0 def
 0 O 0 @g
0.7961 0.4471 0.2745  create_rgb_color set_solid_fill
273.43928 390.91691 m
273.43928 390.91691 L
@c
372.60227 440.90589 m
372.60227 436.33928 L
372.60113 433.98425 370.33909 432.28545 368.03962 432.28545 C
366.43578 432.28545 365.57178 432.57572 364.49093 433.29940 C
364.05524 432.70498 362.64246 432.28545 361.55027 432.28545 C
359.94643 432.28545 359.08243 432.57572 358.00157 433.29940 C
357.49559 432.60860 356.02583 432.28431 354.75619 432.28346 C
353.10954 432.28261 352.49272 432.64290 351.51250 433.29940 C
350.52803 431.95606 346.74293 431.89285 345.12463 433.29940 C
344.86469 433.12535 344.83833 433.05817 344.51915 432.89093 C
342.97625 432.08220 340.65950 432.09128 339.14239 432.89405 C
338.67411 432.19474 337.27691 431.37298 336.10054 431.37298 C
334.53524 431.37298 333.79994 431.36872 332.45036 432.08277 C
331.32274 430.39871 327.77830 430.46901 326.09509 431.40529 C
325.83203 431.55156 325.66025 431.77833 325.45417 431.77833 C
323.44441 431.77833 321.07890 430.82249 319.33672 429.88592 C
317.34879 428.81698 316.32236 427.90762 315.11197 426.10054 C
317.47805 426.10054 319.84384 426.10054 322.20964 426.10054 C
324.66472 426.10054 326.81480 426.20202 329.20583 426.20202 C
331.50246 426.20202 336.91578 426.73748 339.28611 426.24425 C
339.77367 426.14277 340.27625 426.01294 340.72951 425.86243 C
341.08469 425.74450 341.62809 425.52085 341.93962 425.34879 C
344.34057 424.02331 345.80778 421.82929 346.35118 419.11398 C
346.65165 417.61106 346.53855 417.00387 346.69219 415.89836 C
346.76986 415.34135 346.59950 413.33471 346.52721 412.63200 C
346.18252 409.27493 345.22157 405.88129 343.73991 402.94885 C
343.61802 402.70762 343.53354 402.56986 343.41902 402.34054 C
342.16923 399.84009 340.56822 397.65345 338.82406 395.49373 C
337.75200 394.16598 336.62268 393.01058 335.41625 391.80416 C
334.78781 391.17543 334.21890 390.70857 333.59244 390.07899 C
331.71052 388.41250 L
327.98126 385.25754 323.88350 381.80296 319.75597 379.07405 C
317.62715 377.65417 L
315.46063 376.29950 313.31622 374.85808 311.02384 373.71260 C
306.05414 371.22945 301.16806 369.34356 295.64447 367.79896 C
289.89099 366.19058 283.91556 365.03915 277.97159 364.17940 C
275.87225 363.87553 273.90416 363.68957 271.75918 363.39591 C
269.01298 363.01946 262.93124 362.42192 260.25817 362.42532 C
257.74583 362.35701 L
254.60391 362.52964 251.87556 362.47550 248.65370 362.98828 C
245.63339 363.46876 242.77380 364.10740 239.94425 364.92491 C
236.45707 365.93235 232.61839 366.75723 229.82400 368.99972 C
228.53877 370.03096 227.94690 371.64926 227.81225 373.55556 C
227.81225 375.41877 L
228.13937 380.66683 230.96608 387.19162 232.40863 390.07191 C
239.52983 402.62088 L
241.70598 406.23902 243.59953 409.95043 245.94038 413.44753 C
246.28054 413.95550 246.62381 414.38324 246.97672 414.84472 C
252.17206 421.63569 257.16643 422.81178 265.18195 421.69606 C
267.11348 421.42734 269.13600 421.33493 271.10750 421.33493 C
273.62239 421.33493 282.66009 423.13323 285.03893 423.72765 C
286.55461 424.10665 287.78542 424.47713 289.19367 424.94683 C
292.67235 426.10706 294.95225 426.27600 298.67102 425.88227 C
301.92576 425.53757 305.52321 425.89786 309.02854 425.89786 C
309.28677 427.00620 310.02180 428.25033 310.47732 429.31587 C
313.09313 435.43474 317.65436 437.11058 314.05578 442.07802 C
311.70331 445.32482 311.25260 445.91272 309.68050 449.66721 C
309.50901 450.07625 309.05943 450.97427 309.02854 451.34759 C
306.58365 451.34759 304.48148 451.44907 302.03235 451.44907 C
299.45792 451.44907 297.24775 451.14491 295.13764 451.14491 C
292.95978 451.14491 290.95285 451.70561 289.04258 452.34992 C
285.23594 453.63430 281.32129 454.37131 277.24876 455.05587 C
270.95953 456.11263 270.79200 456.12057 264.39732 455.42126 C
260.45206 455.10094 L
259.93729 455.05899 259.72356 455.19137 259.24706 455.20299 C
257.37420 455.24920 255.92825 455.59531 254.52028 456.15430 C
251.96967 457.16712 249.90973 458.98866 248.11455 461.00353 C
245.43213 464.01506 243.46035 467.63065 241.53506 471.15411 C
240.22290 473.55534 238.77354 475.89817 237.36246 478.23591 C
236.63169 479.44602 236.00268 480.59206 235.27219 481.82372 C
233.83928 484.23940 232.65468 486.69846 231.42756 489.23376 C
230.11569 491.94312 228.11074 497.22094 227.81225 501.65405 C
227.81225 503.73269 L
227.91883 505.09361 228.25928 506.29805 228.92485 507.21817 C
230.93065 509.99216 235.84252 511.14869 239.08876 512.06031 C
246.66718 514.18857 250.87408 514.82013 259.14274 514.82013 C
262.73310 514.82013 271.29969 513.98504 275.09272 513.43143 C
285.72520 511.88031 293.05559 510.65490 303.13587 507.00076 C
307.18346 505.53354 311.07883 503.60825 314.76416 501.39213 C
317.46132 499.77014 319.95751 497.95994 322.51436 496.16419 C
322.80548 495.95981 323.04586 495.78973 323.33953 495.56976 C
328.10372 491.81698 L
329.43203 490.75880 330.86183 489.68362 332.06967 488.48230 C
332.36135 488.19231 332.54419 488.11380 332.83219 487.82551 C
335.82189 485.03537 L
338.20413 482.65285 340.45540 480.02457 342.19020 477.10715 C
344.06107 473.96069 345.52063 470.50413 346.18167 466.80236 C
346.87814 462.90274 347.21518 458.17200 345.00387 454.71288 C
343.83373 452.88255 342.07682 451.67443 339.95395 451.14435 C
337.66526 450.57317 336.97020 450.81383 334.67726 450.83650 C
334.10239 450.84246 333.97654 450.94450 333.36652 450.94535 C
315.01077 451.14491 L
315.74069 450.05499 316.27786 449.37751 317.34198 448.60904 C
319.61509 446.96778 322.37206 445.97395 325.24328 445.54450 C
326.01118 445.42942 326.53502 446.37902 327.88772 446.37902 C
329.52699 446.37902 330.69713 446.54712 332.04586 445.56888 C
332.26072 445.41298 332.33613 445.30696 332.55184 445.16239 C
334.19197 446.26082 337.00961 446.09357 338.57972 444.90387 C
338.87395 444.68107 338.98309 444.52602 339.24387 444.35140 C
341.17087 445.37102 343.42781 445.08217 345.12463 443.94576 C
347.17408 445.31802 349.56283 445.31943 351.61370 443.94576 C
352.28721 444.38769 L
354.15071 445.33106 356.51509 445.00904 358.10306 443.94576 C
358.44803 444.20910 L
358.57984 444.29357 358.63115 444.32050 358.76693 444.39732 C
359.06117 444.56315 359.13118 444.58044 359.48069 444.69723 C
359.97109 444.86164 360.73729 444.95972 361.34759 444.95972 C
362.86072 444.95972 363.43729 444.55663 364.59213 443.94576 C
364.68142 444.02343 364.58561 443.95058 364.75824 444.08438 C
364.82570 444.13682 364.86425 444.16431 364.93455 444.21250 C
365.44365 444.49909 L
365.53918 444.54132 365.56413 444.55096 365.66617 444.58980 C
366.36151 444.85512 367.11043 444.95972 367.93814 444.95972 C
370.24809 444.95972 372.60113 443.32894 372.60227 440.90589 C
@c
273.43928 486.32825 m
273.43928 486.32825 L
@c
286.92454 392.03235 m
286.92454 392.03235 L
@c
290.57471 383.10973 m
290.57471 383.10973 L
@c
290.57471 494.13572 m
290.57471 494.13572 L
@c
316.93720 401.56328 m
316.93720 401.56328 L
@c
328.29335 443.23597 m
329.14063 443.23597 330.52394 443.45225 330.52394 442.22202 C
330.52394 435.02315 L
330.52394 433.75946 329.05701 434.00920 328.19187 434.00920 C
327.69071 434.00920 327.27940 434.42050 327.27940 434.92167 C
327.27940 442.32350 L
327.27940 442.87030 327.78057 443.23597 328.29335 443.23597 C
@c
334.78271 442.62765 m
337.56491 442.62765 337.01301 442.84337 337.01301 435.63146 C
337.01301 434.23824 334.45361 434.50498 334.09729 434.84513 C
334.00715 434.93131 333.76847 435.28224 333.76847 435.42850 C
333.76847 441.61370 L
333.76847 442.16504 334.23647 442.62765 334.78271 442.62765 C
@c
290.57471 494.13572 m
289.97263 494.53909 289.46948 495.29282 288.87676 495.88469 C
288.59216 496.16844 287.31203 497.73175 286.86359 496.72261 C
286.58863 496.10324 287.46113 495.38551 288.06917 494.57055 C
291.21534 489.90926 L
291.37748 489.60935 291.42822 489.60425 291.58356 489.36472 C
292.89345 487.34334 293.66362 485.31685 294.63052 483.48935 C
290.91883 484.54299 L
290.07694 484.99569 288.87506 486.02126 288.21543 486.70668 C
287.97704 486.95443 287.89512 487.10636 287.66041 487.36828 C
286.65780 488.48797 285.99250 489.82507 285.44598 491.23757 C
285.08088 492.18066 285.26145 492.32438 284.79543 493.02028 C
284.08564 493.02028 L
283.78772 492.57553 283.74180 492.58148 283.84696 491.97883 C
284.17124 490.12072 284.84901 488.44460 285.81392 486.83991 C
286.18356 486.22507 286.62803 485.70548 287.02602 485.11162 C
286.72072 485.13685 286.23317 485.19099 285.83858 485.24202 C
284.77956 485.37893 283.03143 485.41578 281.85506 485.41578 C
281.26488 484.73490 281.54806 484.31282 282.40157 484.13735 C
287.20573 483.14976 292.06630 481.77071 296.05039 478.82551 C
296.66126 478.37395 296.62299 478.50151 296.84013 477.68882 C
297.67238 474.76942 L
297.96718 473.59020 298.17921 472.93143 298.17921 471.42340 C
296.39509 472.27975 294.34507 473.12220 292.48894 473.74299 C
291.48520 474.07861 290.38564 474.39694 289.35893 474.66879 C
287.44951 475.17364 288.09893 474.79918 286.38624 475.75191 C
283.99209 477.08419 282.75761 478.43603 280.96781 480.15581 C
279.85238 481.38548 L
278.68195 482.61458 277.37773 484.58863 276.46129 486.00425 C
276.17499 486.44646 275.98450 486.81638 275.70076 487.27276 C
275.24721 488.00239 275.37279 487.83231 275.65682 488.67335 C
276.26712 490.47931 276.99874 493.45058 276.99052 495.45128 C
276.98655 496.36630 277.10561 498.77631 276.82214 499.34494 C
276.52904 499.93172 275.81811 499.65222 275.69282 499.18280 C
275.68176 499.14057 275.57008 497.37061 275.56753 497.27991 C
275.52954 495.78520 275.08592 493.49877 274.64428 492.11943 C
274.49178 491.64350 274.26784 491.09726 274.14907 490.58702 C
273.23943 491.25345 271.93975 497.36268 271.92699 497.38876 C
271.71298 497.82472 271.90233 497.58009 271.61433 497.68441 C
271.41959 497.80772 271.87313 497.77228 271.31046 497.77569 C
271.18687 497.77654 271.03124 497.72438 270.94054 497.65578 C
270.50173 497.32413 270.77641 496.58003 270.80022 496.16050 C
270.94649 493.57304 271.96441 490.12072 272.90211 487.71751 C
273.07191 487.28268 273.34290 486.74296 273.43928 486.32825 C
272.91515 486.46828 272.17077 487.24044 271.79150 487.62085 C
269.29276 490.13036 269.16831 492.49106 268.29751 492.36775 C
266.63414 492.13247 269.56828 487.60413 269.77323 487.32661 C
270.84217 485.87868 272.53020 483.84964 274.41694 483.45307 C
275.32488 483.26202 275.14006 482.83313 275.95446 481.54309 C
276.18831 481.17260 276.37228 480.86164 276.62258 480.48746 C
277.10844 479.76151 277.51720 479.13817 278.02970 478.44709 C
278.30239 478.07972 279.42066 476.87669 279.52299 476.49317 C
277.02198 476.49317 273.13427 477.89660 270.84132 478.66082 C
269.50649 479.10529 268.27455 479.65691 266.99301 480.18614 C
266.13439 480.54076 263.14214 481.93937 262.66734 482.65370 C
262.18375 483.38135 261.64715 484.55660 261.31493 485.35710 C
261.15420 485.74375 261.07909 485.89767 260.92375 486.28431 C
260.79506 486.60548 260.56091 487.01877 260.62894 487.27672 C
261.54850 489.09402 L
262.09162 490.35827 262.51257 491.77077 262.67754 493.33861 C
262.81616 494.65899 262.74671 495.77726 262.56274 497.04860 C
262.47572 497.64926 262.48139 497.64699 262.18460 498.09005 C
260.51386 498.09005 261.59896 497.09225 261.10035 494.00334 C
260.71172 491.59616 259.97074 490.92094 259.75134 489.97871 C
259.54838 489.97871 L
259.50161 490.53997 259.25357 491.13269 259.13339 491.69254 C
259.00668 492.28243 258.85332 492.92844 258.75043 493.54044 C
258.32891 496.05194 258.11490 499.25169 258.48850 501.78614 C
258.60246 502.55717 258.98400 504.00709 258.98343 504.59839 C
258.98287 505.01112 258.83858 504.98617 258.63591 505.28891 C
257.79203 505.28891 257.77729 504.98362 257.58482 504.31209 C
257.05389 502.46135 256.82967 500.91732 256.54876 498.96028 C
256.41609 498.03676 256.74066 496.16561 255.28706 498.99969 C
254.65550 500.23106 254.69065 501.94772 253.87030 501.84142 C
252.40847 501.65206 253.79745 496.89893 256.07735 494.72050 C
256.69814 494.12721 256.50369 493.82731 256.62444 492.63137 C
256.87446 490.15446 257.48419 488.35672 258.02759 486.02409 C
257.03150 486.55106 254.12570 489.57222 253.52334 490.03710 C
253.13528 490.33672 252.93146 490.52693 252.65367 490.89118 C
251.82709 491.97458 250.64787 492.84425 249.81477 493.93276 C
249.02731 494.86904 L
248.83965 495.07965 248.76794 495.13181 248.59786 495.35206 C
245.20904 499.67688 L
244.76003 500.01165 244.38104 499.75427 244.22003 499.41411 C
244.12762 499.21909 244.14690 499.09578 244.22570 498.90132 C
244.69710 497.73969 248.41049 492.42643 249.27619 491.36655 C
251.79931 488.21159 L
252.13776 487.77874 252.93317 487.10438 253.05931 486.63241 C
252.22309 486.43767 251.80129 486.24265 250.63058 486.33279 C
248.80280 486.47395 247.02151 487.26539 245.53786 488.23654 C
245.06957 488.54324 245.19430 488.55883 244.44085 488.55883 C
243.76224 487.54573 244.58428 487.23676 245.65606 486.52980 C
247.26217 485.47020 249.23792 484.45739 251.33216 484.39843 C
253.50661 484.33720 253.20189 484.66545 254.68157 485.01014 C
254.99934 484.53591 257.68488 481.85688 258.27307 481.40277 C
258.62995 481.12724 258.70904 480.99997 259.01688 480.72699 C
261.49890 478.52674 264.41830 476.78598 267.36321 475.28362 C
267.71584 475.10391 267.65943 475.25244 267.76148 474.87090 C
266.98054 474.87090 266.00513 474.61181 265.31943 474.47376 C
264.07077 474.22176 264.25843 474.28554 263.13987 474.71074 C
259.11950 476.24031 254.51887 477.60605 250.11808 476.29134 C
249.10498 475.78337 L
249.10498 475.17506 L
249.43096 474.89244 L
250.50954 474.87090 251.17427 475.27909 252.34583 475.27994 C
254.51915 475.28164 256.29279 475.02680 258.24331 474.37682 C
258.71811 474.21865 259.03843 474.08769 259.51068 473.92072 C
260.01865 473.74129 260.25420 473.57036 260.76529 473.45131 C
260.52520 473.12362 259.36356 472.91046 258.94006 472.74151 C
258.33713 472.50113 257.67808 472.27691 257.10066 472.04646 C
256.47194 471.79502 255.94356 471.57534 255.32306 471.28876 C
254.56592 470.93896 254.14016 470.91997 254.37742 469.90261 C
255.07757 469.56671 256.48384 470.17446 257.66192 470.47096 C
258.27307 470.62460 258.79209 470.72013 259.42054 470.84173 C
259.85339 470.92535 260.76671 471.11924 261.27213 471.11924 C
260.88803 470.31874 260.67402 468.80050 259.18809 467.62668 C
256.93172 465.84454 257.43628 466.52570 255.92202 465.92447 C
255.65896 465.81987 255.73436 465.80598 255.49257 465.64413 C
255.49257 465.03581 L
255.81855 464.75320 L
257.02980 464.73165 257.82661 464.97997 258.67049 465.40658 C
259.58183 465.86750 260.09036 466.26860 260.86734 466.85991 C
262.03946 467.75225 263.38139 469.96554 263.50271 471.42340 C
266.35663 471.61134 L
268.31282 471.83102 270.61115 471.50816 272.52709 471.52517 C
274.41354 471.54189 276.43890 471.21931 278.30324 471.11641 C
280.47997 470.99594 283.08643 470.62970 285.17641 470.18183 C
285.53924 470.10444 286.08860 469.93861 286.51918 469.90261 C
286.41997 469.76740 283.56945 467.59493 282.75250 466.57162 C
281.18721 464.58822 L
281.03669 464.38101 281.00098 464.30702 280.87257 464.09159 C
280.74104 463.87077 280.61206 463.72167 280.52504 463.51502 C
280.29317 462.96340 280.61490 462.61644 281.24674 462.60227 C
281.68356 462.89480 282.28110 463.58277 282.69128 463.99663 C
283.17175 464.48135 283.66980 464.87679 284.23049 465.29660 C
284.82463 465.74164 285.29320 466.05146 285.92901 466.43669 C
287.17228 467.19043 288.54057 467.75480 289.95307 468.19219 C
291.07474 468.53943 291.17764 468.57940 292.26898 468.14910 C
293.73732 467.57112 294.93411 467.07647 296.28822 466.38907 C
298.09757 465.35953 L
301.01669 463.51701 303.59140 461.28359 305.52066 458.38460 C
305.93225 457.76608 307.44992 455.28718 307.50746 454.59213 C
305.57452 454.59213 301.48668 454.89288 299.82954 454.66583 C
298.24526 454.44869 296.50139 454.39512 294.83320 454.38888 C
292.52041 454.38038 290.55061 455.22567 288.43370 455.89833 C
285.37965 456.86835 273.98353 459.17036 270.70413 459.15732 C
268.95090 459.14995 267.43776 459.02948 265.85348 458.83191 C
260.91950 458.21707 256.99238 457.68841 252.95669 460.77591 C
251.04898 462.23546 249.40176 464.34076 248.02951 466.39361 C
246.26324 469.03663 244.79178 471.91436 243.21912 474.66283 C
241.62690 477.44532 239.86375 480.12605 238.32227 482.94765 C
236.90466 485.48409 L
236.72806 485.84069 236.59398 486.01106 236.42957 486.32683 C
233.88633 491.21235 231.50154 496.42753 231.05055 502.03871 C
230.92413 503.60854 231.06189 505.17921 232.11099 505.95846 C
233.16321 506.73969 234.35235 507.15524 235.67754 507.66406 C
236.97723 508.16324 238.31915 508.50170 239.71039 508.90394 C
246.13597 510.76035 251.35228 511.66857 258.02759 511.67679 C
259.01546 511.67792 259.59175 511.57106 260.56233 511.57531 C
264.65783 511.59373 277.08321 509.99046 281.81169 509.19987 C
289.80255 507.86391 300.06170 505.41676 307.27219 501.80882 C
309.89820 500.48079 L
310.47846 500.13326 311.00343 499.87134 311.59474 499.54082 C
316.47090 496.50831 L
318.58384 495.09950 320.62819 493.67169 322.60139 492.09392 C
323.10765 491.68885 323.56630 491.36088 324.09354 490.94957 C
325.92217 489.52261 328.82031 487.21946 330.49672 485.59124 C
332.57735 483.71754 L
333.77216 482.51537 335.02365 481.34466 336.08636 480.02769 C
336.21392 479.86980 336.29102 479.80857 336.41915 479.65039 C
339.87175 475.38595 342.22139 471.00643 343.18403 465.32580 C
343.93096 460.92047 343.82438 455.42013 339.18491 454.24545 C
337.67943 453.86419 335.82387 454.10117 334.27559 454.08529 C
333.37106 454.07594 332.72816 454.18677 331.74085 454.18649 C
318.66094 454.28797 L
316.89156 454.28797 315.33761 454.38945 313.48998 454.38945 C
312.67984 455.92016 312.15543 457.72129 310.85943 459.87024 C
310.33729 460.73622 309.87043 461.51887 309.26098 462.32759 C
308.42220 463.44047 307.50520 464.69339 306.43625 465.58658 C
304.84857 467.04104 L
304.72923 467.14507 304.70542 467.18135 304.58069 467.28000 C
303.97124 467.76359 303.94743 468.12161 303.73569 468.96945 C
303.45506 470.09197 303.20561 471.03732 303.24557 472.54252 C
303.26145 473.14403 303.41849 473.72825 303.60756 474.20816 C
304.66772 476.90135 308.11578 476.83446 311.16557 476.60230 C
312.44230 476.50507 312.42019 476.43732 313.26293 475.65780 C
315.38268 473.69707 315.83962 472.72195 316.61206 469.88164 C
316.94967 468.64120 317.35049 467.90674 317.34283 466.55688 C
317.33065 464.32658 317.85619 462.79162 318.98126 461.09735 C
319.53203 460.26822 320.16387 460.67272 320.28321 461.08120 C
320.27272 461.54750 320.17890 461.58520 320.01392 461.92706 C
319.88750 462.18813 319.77553 462.48775 319.68850 462.71764 C
319.53543 463.12328 319.28060 464.12759 319.26926 464.63017 C
320.34614 463.90904 321.14665 463.30724 322.41231 462.80466 C
323.43194 462.39987 325.70702 461.22038 325.85981 462.39931 C
325.95024 463.09663 324.73276 463.36961 324.28035 463.55726 C
323.66750 463.81181 323.02970 464.14857 322.44548 464.46009 C
321.82809 464.78920 321.37143 465.16677 320.83172 465.58403 C
318.36586 467.49005 319.02293 472.05269 317.44035 474.76545 C
317.28643 475.02907 317.02224 475.36328 316.93720 475.68217 C
318.71537 475.53392 322.25811 474.30340 323.86734 473.48646 C
324.58280 473.12362 325.09899 472.68510 325.75833 472.33616 C
325.75833 470.61439 326.22208 468.98192 327.05546 467.65077 C
327.33128 467.20998 327.61049 466.86898 327.88772 466.45512 C
328.59751 466.45512 L
329.14120 467.26724 328.81294 467.23918 328.45153 468.13408 C
328.21058 468.73077 327.98920 469.42356 327.98920 470.20677 C
328.39087 469.93776 328.55272 469.58769 328.92746 469.21861 C
329.42069 468.73389 330.76318 466.65043 331.40948 466.69748 C
331.72696 466.72072 331.90214 466.88088 331.94750 467.17569 C
332.04954 467.83786 330.87090 469.14151 330.50381 469.67981 C
329.96920 470.46359 329.38016 471.28110 328.77043 472.00195 C
328.60743 472.19443 328.48554 472.27465 328.32312 472.46740 C
328.12016 472.70891 328.10003 472.78403 327.86447 473.02243 C
327.17735 473.71663 326.49052 474.35528 325.68236 474.91427 C
324.98164 475.39871 325.81843 475.30687 326.67420 475.27994 C
328.18876 475.23231 329.35691 474.77452 330.46753 474.10469 C
330.77169 473.92129 330.80910 473.87679 331.07386 473.69395 C
331.71449 473.25061 331.95373 473.50431 332.24769 474.05962 C
332.06230 474.85531 330.59083 475.75247 329.84844 476.12183 C
327.96028 477.06123 325.36488 477.52498 323.26328 476.95975 C
321.99789 476.61931 321.46016 477.27156 319.89005 477.82375 C
319.54932 477.94365 319.26728 477.94252 319.06630 478.21691 C
319.62728 478.36658 320.46917 479.16283 320.90655 479.52000 C
322.34485 480.69383 323.74970 481.98217 324.90539 483.42983 C
325.29118 483.91313 325.35298 483.77877 325.35298 484.60450 C
325.06611 484.79669 324.79597 485.03962 324.37814 484.77657 C
324.16016 484.63909 323.86365 484.28306 323.57112 484.05458 C
321.11405 482.13411 319.05638 480.67739 316.11288 479.44630 C
315.23839 479.08063 314.67855 479.46331 313.73291 479.67647 C
312.87005 479.87150 312.10129 480.05546 311.21688 480.20258 C
310.34976 480.34658 309.35083 480.35594 308.52142 480.54898 C
308.52142 484.60450 L
310.42488 485.87924 310.52438 485.31883 312.46866 485.52435 C
313.16683 485.59833 313.18583 485.75906 313.18583 486.53121 C
312.54236 486.96180 311.73307 487.04400 310.85603 487.04060 C
310.39540 487.03861 309.91096 487.07546 309.45798 487.01424 C
309.37238 487.00261 308.55997 486.69647 308.41994 486.83537 C
308.35616 486.96831 307.84422 490.42913 307.81729 490.79537 C
307.70504 492.34592 307.70476 493.52230 308.05342 494.90787 C
308.18920 495.44731 308.60816 496.22202 308.24022 496.58995 C
306.93090 497.89899 305.89767 492.96756 305.88520 492.41197 C
305.58869 492.61039 305.39679 492.98258 305.14422 493.29298 C
303.86296 494.86762 302.36400 495.99128 300.54586 496.90772 C
300.20513 497.07978 299.77313 497.28331 299.40917 497.40236 C
298.45559 497.71502 297.84047 496.71581 299.12372 496.09389 C
300.30180 495.52328 301.35146 494.76898 302.30787 493.90413 C
303.38050 492.64469 L
304.58608 491.02583 305.32167 489.25871 305.64397 487.20076 C
305.78825 486.27921 305.40019 483.80769 305.24825 482.90967 C
305.10765 482.07827 304.96394 481.07679 304.77005 480.24482 C
302.17578 479.64019 301.14198 478.25660 300.61276 478.11543 C
300.50957 478.55849 300.26920 479.07723 300.07247 479.50157 C
298.44737 483.00605 296.44668 486.32400 294.22573 489.47216 C
293.04283 491.14913 292.95638 491.30872 292.60715 493.83609 C
292.05014 497.86724 292.70409 498.72416 292.70409 501.23310 C
292.35005 501.53981 292.26331 501.51997 291.79162 501.53726 C
291.56712 501.20220 291.56995 501.38050 291.42340 500.89153 C
291.14022 499.94759 291.02769 499.16580 290.86356 498.20683 C
290.67307 497.09282 290.57471 495.44674 290.57471 494.13572 C
@c
273.43928 390.91691 m
272.46246 388.34504 L
272.13449 387.38069 271.89439 386.54107 271.60157 385.55546 C
271.07178 383.77106 270.98306 382.66611 270.78576 380.89587 C
270.68910 380.02961 270.55162 380.13789 271.00602 379.45956 C
272.49676 379.45956 271.64381 379.84847 272.66627 382.97027 C
272.86413 383.57490 273.64337 386.28794 274.14907 386.65843 C
275.04227 383.59729 L
275.35408 382.34466 275.55817 380.48542 275.66447 379.14973 C
275.68970 378.83622 275.63698 378.44107 275.67468 378.14598 C
275.76340 377.44923 276.51005 377.34718 276.80315 377.81773 C
277.12120 378.32854 276.98683 380.79184 276.99052 381.69241 C
276.99534 382.84299 276.74674 384.26683 276.54066 385.29836 C
276.27676 386.61931 275.42551 389.25128 275.42523 389.25383 C
275.34586 389.76435 277.62888 393.02504 278.06003 393.59650 C
280.44709 396.76167 282.88800 399.35254 286.33465 401.44337 C
286.67254 401.64860 287.28283 401.99017 287.67883 402.12709 C
292.41298 403.47666 L
294.01483 404.01071 296.66013 405.01786 298.17921 405.82176 C
298.17921 404.34208 297.97427 403.68274 297.69279 402.55654 C
297.43257 401.51650 297.16243 400.57909 296.87443 399.62381 C
296.57169 398.62063 296.63291 398.81225 295.64532 398.11521 C
294.37398 397.21776 294.34422 397.30564 293.25402 396.65367 C
287.16378 394.22665 L
286.16712 393.92929 285.18775 393.69458 284.18825 393.45052 C
282.99600 393.15940 281.27480 393.18066 281.55090 392.23502 C
281.77739 391.45833 283.26472 391.82683 283.98784 391.82627 C
284.96721 391.82513 285.86891 392.03235 286.92454 392.03235 C
285.86891 390.45175 L
284.91364 388.99332 283.78148 386.27291 283.78148 384.52904 C
283.92973 384.42983 284.77417 383.51083 285.12482 384.90973 C
285.31672 385.67537 285.50381 386.18957 285.80513 386.86564 C
286.35959 388.11090 287.00901 389.10841 287.85969 390.08324 C
288.50343 390.82082 289.01282 391.34835 289.83515 391.96091 C
291.24057 393.00775 291.64309 392.90485 293.61713 393.45137 C
293.98422 393.55313 294.26627 393.67106 294.63052 393.75609 C
294.46469 393.44230 294.37058 393.17499 294.22375 392.84476 C
294.09194 392.54825 293.94709 392.28718 293.78580 391.96460 C
293.47569 391.34438 293.20129 390.79843 292.90762 390.20655 C
291.48208 387.67748 L
291.37323 387.50967 291.34545 387.50315 291.22724 387.32400 C
287.13742 381.47726 L
286.76551 381.03250 286.82334 381.25304 286.82334 380.47351 C
287.68876 379.89383 287.66920 380.15320 288.82602 381.30973 C
289.13556 381.61956 289.38614 381.85427 289.68973 382.16948 C
290.05427 382.54819 290.12230 382.80671 290.57471 383.10973 C
290.57471 380.76973 290.82246 378.57317 291.40271 376.43414 C
291.54444 375.91087 291.54104 376.08180 291.79162 375.70791 C
292.26983 375.70791 292.24517 375.72605 292.60290 375.80939 C
292.84214 376.83723 292.03824 379.99559 292.57172 383.14063 C
293.25969 387.19701 293.07543 385.95713 294.95594 388.76627 C
297.27241 392.43231 L
297.95102 393.56589 300.54444 398.30740 300.61276 399.12973 C
301.20803 398.97071 301.70466 397.71468 304.77005 397.00035 C
305.29644 394.74057 305.93225 390.95631 305.40104 388.76485 C
304.80265 386.29729 303.17272 383.86942 301.16466 382.35487 C
299.74479 381.44296 L
299.37203 381.22186 299.29436 381.23348 298.91792 381.05320 C
297.96633 380.59682 297.86967 378.37701 302.17465 381.24369 C
303.22375 381.94214 303.88394 382.50737 304.74595 383.43770 C
305.56233 384.45392 L
305.82198 384.85559 305.69783 384.59310 305.68309 384.83320 C
306.00624 384.57808 305.91638 384.43323 306.08674 383.71663 C
306.35263 382.59694 306.79767 381.38230 307.40627 380.47351 C
308.11578 380.47351 L
308.36353 380.84315 308.48825 380.94690 308.31420 381.47414 C
307.51087 383.90570 307.66932 385.32983 308.01969 387.86995 C
308.06787 388.21833 308.33972 390.24227 308.41994 390.41008 C
308.50271 390.49200 308.71729 390.39704 308.85959 390.35735 C
309.52035 390.17310 310.17657 390.09487 310.77780 390.17679 C
312.09109 390.35565 312.26967 390.10082 313.18583 390.71424 C
313.18583 391.19216 313.16769 391.16778 313.08435 391.52523 C
311.93518 391.79282 308.59512 391.45124 308.51348 393.03808 C
308.49449 393.40715 308.52142 393.88054 308.52142 394.26293 C
308.52170 395.07420 308.52142 395.88520 308.52142 396.69619 C
308.89361 396.69619 309.37238 396.76876 309.82309 396.81439 C
314.71880 397.79943 L
315.71688 398.10472 315.58706 398.03953 316.87002 397.44028 C
317.27112 397.25263 317.53134 397.17723 317.91798 396.96746 C
320.32602 395.66041 321.94857 394.57502 324.00283 392.81159 C
324.39203 392.47767 324.34356 392.33650 325.04882 392.33650 C
325.58655 392.95701 325.37565 393.20362 324.93515 393.74362 C
323.80214 395.04416 L
323.10397 395.87924 320.95134 397.68973 319.97906 398.42022 C
319.74038 398.59937 319.21625 398.92507 319.06630 399.12973 C
320.05531 399.36019 321.87940 400.25565 322.28107 400.38435 C
322.77146 400.54139 324.09921 399.81827 326.35276 400.05638 C
327.45345 400.17260 329.02866 400.61083 329.81102 401.05928 C
330.53556 401.47427 332.04841 402.33005 332.24769 403.18554 C
331.84885 403.93928 331.56652 403.86274 330.90803 403.41033 C
329.06126 402.14154 327.81118 401.96891 325.35298 401.96891 C
325.52504 402.22602 327.41972 403.62718 328.26331 404.63490 C
330.72633 407.84995 L
331.65609 409.15899 332.05975 409.44954 331.84205 410.38441 C
330.78387 410.63102 330.90718 410.33225 329.78296 408.99628 C
329.44535 408.59518 328.32567 407.26375 327.98920 407.03839 C
327.98920 409.15361 329.63046 410.43033 328.45380 410.76085 C
327.16290 411.12312 325.75833 406.92898 325.75833 404.90929 C
325.24328 404.63631 324.82120 404.23266 323.86620 403.75984 C
322.20312 402.93609 318.57704 401.59984 316.93720 401.56328 C
317.03613 401.93348 317.28047 402.14551 317.44658 402.47405 C
317.88085 403.45909 L
318.71197 405.50627 318.72217 408.34346 319.67915 410.17720 C
319.99890 410.78976 320.46746 411.24898 320.96551 411.73002 C
321.94630 412.67735 323.34208 413.22132 324.57600 413.79761 C
325.36545 414.16668 326.16595 414.19106 325.65713 415.25150 C
324.40337 415.54346 321.77480 414.18000 320.65682 413.55978 C
320.13553 413.27036 319.73698 412.92850 319.26926 412.61528 C
319.29420 413.73184 319.81833 414.73729 320.19194 415.65827 C
320.37194 416.10274 320.19137 416.25213 319.97906 416.56961 C
319.26926 416.56961 L
316.45191 412.36186 317.97241 411.59707 317.02564 408.77518 C
316.85471 408.26523 316.73934 407.79411 316.56756 407.20535 C
315.79880 404.56998 315.62164 403.94863 313.71817 402.04488 C
312.46696 400.79395 312.79918 400.83335 311.11569 400.59128 C
308.69858 400.24431 305.42428 400.75512 304.33946 401.84249 C
302.25430 403.93247 303.73994 409.26217 304.30091 409.73811 C
305.99121 411.17244 306.00255 411.15770 307.43036 412.69238 C
310.10400 416.10246 L
310.94107 417.35906 311.58482 418.69332 312.23820 420.05197 C
312.47546 420.54605 312.66595 420.95395 312.87855 421.43924 C
313.07698 421.89194 313.26803 422.43676 313.48998 422.85600 C
331.63682 423.06094 L
332.07789 423.05924 332.51896 423.05811 332.95975 423.05641 C
333.54850 423.05386 333.70271 423.13521 334.17354 423.16044 C
337.10995 423.31833 340.51805 423.49436 342.24661 420.89046 C
343.75209 418.62274 343.64920 415.16816 343.19367 411.90917 C
342.24576 405.12813 338.61742 399.56797 333.94592 394.89676 C
333.48189 394.43244 333.09184 394.04268 332.62781 393.57836 C
332.38545 393.33600 332.21764 393.15487 331.97074 392.91732 C
325.57011 387.45524 L
321.68580 384.29178 317.63282 381.28139 313.33096 378.70554 C
308.52198 375.82668 304.22665 373.92151 298.82608 372.12066 C
292.35090 369.96180 284.54712 368.27688 277.36469 367.32104 C
266.73024 366.09250 L
264.14872 365.81783 257.61203 365.29682 255.53537 365.61146 C
255.08438 365.67950 254.76151 365.67071 254.27367 365.66759 C
253.68576 365.66391 253.52731 365.74809 253.05846 365.77049 C
247.49660 366.03553 239.08139 368.10113 233.83701 370.27531 C
231.21609 371.36183 231.27420 372.20939 231.02617 374.05956 C
230.82917 375.52620 231.47915 378.39770 231.78671 379.64211 C
232.29666 381.70658 233.03480 383.58170 233.83786 385.49962 C
234.11027 386.14989 234.34384 386.69811 234.63893 387.33477 C
237.34913 393.18378 240.93524 398.62460 244.14180 404.19439 C
245.72409 406.94230 247.18932 409.79509 249.09024 412.32557 C
250.22013 413.82964 251.39877 415.27616 252.91304 416.41143 C
258.68069 420.73512 263.40576 418.11732 270.70186 418.09011 C
273.16857 418.08104 277.28617 418.93654 279.87052 419.36513 C
282.85398 419.85950 285.55058 420.54180 288.44561 421.33493 C
290.58690 421.92170 292.46740 422.87074 294.83206 422.85713 C
296.59861 422.84721 298.09531 422.64340 299.80120 422.55128 C
302.42409 422.40954 304.98094 422.65304 307.60894 422.65304 C
306.11565 419.83115 305.35880 418.12157 302.97033 415.73310 C
302.45556 415.21833 302.07657 414.80929 301.51106 414.35320 C
298.54942 411.96274 295.78677 410.38469 292.21257 409.05099 C
291.17820 408.66520 291.11641 408.69184 290.00806 409.00649 C
287.22161 409.79792 284.64406 411.29320 282.64082 413.29956 C
282.22668 413.71427 281.63055 414.50627 281.04378 414.64290 C
280.71298 414.46800 280.54545 414.44646 280.43546 414.03458 C
280.35156 413.09461 284.02469 409.32822 284.70841 408.77631 C
285.02787 408.51836 285.27761 408.29924 285.60643 408.05235 C
285.84510 407.87291 286.36951 407.54721 286.51918 407.34255 C
284.11200 406.78186 281.03046 406.23931 278.40699 406.12677 C
276.49247 406.04457 274.63209 405.74665 272.62431 405.72425 C
272.03924 405.71773 271.86009 405.61398 271.21096 405.61654 C
266.44082 405.61654 L
265.50425 405.61285 264.40554 405.82176 263.50271 405.82176 C
263.26176 408.71764 259.48346 412.51380 255.79672 412.51380 C
255.49002 412.15975 255.51014 412.07301 255.49257 411.60132 C
256.08869 411.20220 256.74378 411.12652 257.42098 410.79175 C
258.10243 410.45471 258.59424 410.18088 259.11836 409.65024 C
259.61414 409.14822 260.04076 408.74428 260.42060 408.11329 C
260.60910 407.79978 260.73836 407.51121 260.90220 407.17559 C
261.09354 406.78413 261.11991 406.44340 261.27213 406.12592 C
258.97323 406.12592 256.16466 407.44403 254.58009 407.44403 C
254.27339 407.08998 254.29351 407.00353 254.27594 406.53156 C
255.39024 405.78548 259.72214 403.99058 260.86649 403.89534 C
260.60372 403.75247 L
260.52406 403.71335 260.39679 403.65524 260.32677 403.62378 C
260.08753 403.51720 259.92567 403.45342 259.68019 403.35789 C
256.93228 402.29150 253.88646 401.55194 250.87096 402.11235 C
250.27569 402.22318 250.10872 402.37427 249.40913 402.37427 C
248.97770 401.87679 248.92838 401.39235 249.57439 401.12022 C
249.94063 400.96630 250.39417 400.85773 250.74624 400.77099 C
251.61109 400.55811 252.39940 400.54280 253.32066 400.40504 C
256.14227 399.98296 260.60343 401.58879 263.08545 402.48765 C
264.13739 402.86863 264.10649 402.99562 265.30243 402.75468 C
266.07005 402.59991 267.06472 402.45874 267.86268 402.27307 C
267.50239 401.95984 264.68646 400.53033 264.15411 400.20236 C
262.91906 399.44211 261.86088 398.70850 260.72192 397.85499 C
260.12693 397.40939 259.70854 397.02586 259.15720 396.58082 C
258.82044 396.30898 258.71868 396.19757 258.40885 395.90929 C
258.10554 395.62724 257.91137 395.51981 257.59616 395.20120 C
256.83959 394.43584 255.21676 393.03439 254.68157 392.23502 C
253.65033 392.47540 252.83906 392.86998 251.63717 392.84872 C
250.57644 392.83030 249.35924 392.50658 248.53890 392.19279 C
247.63011 391.84469 246.88687 391.45436 246.10592 390.97559 C
245.70964 390.73294 245.38309 390.50787 245.01912 390.23717 C
244.61490 389.93641 244.26198 389.73118 244.13669 389.19317 C
244.71213 388.10523 245.17956 388.80879 245.92961 389.22520 C
247.38265 390.03165 248.62989 390.58299 250.39106 390.84746 C
250.95146 390.93165 251.74573 390.92513 252.40479 390.76951 C
252.73616 390.69128 252.70980 390.64195 253.05931 390.61276 C
252.92721 390.11811 252.15024 389.42561 251.81121 389.02195 C
250.03757 386.91128 248.36343 384.73540 246.83357 382.44047 C
246.43049 381.83584 244.09389 378.46970 244.15228 377.95720 C
244.20586 377.48863 244.58457 377.43165 245.15036 377.43165 C
245.58180 378.07569 246.03959 378.65679 246.52545 379.30110 C
249.93099 383.39858 L
251.31798 385.13140 256.14000 389.95739 258.02759 391.22107 C
257.70331 389.82898 257.23899 388.41307 257.00003 386.97619 C
256.51899 383.50261 L
256.46173 382.80246 256.55017 382.97339 256.12951 382.57427 C
253.89950 380.45707 252.46233 375.78472 253.76910 375.40346 C
254.67562 375.13928 254.68129 376.89732 255.18898 378.03969 C
255.39250 378.49805 255.66803 378.86825 255.95688 379.30309 C
256.60318 380.27594 256.48724 379.46636 256.50397 378.64602 C
256.53855 376.97414 257.19137 373.20491 258.02759 371.95625 C
259.62661 371.95625 258.78784 373.35713 258.55200 375.01540 C
258.08542 378.29679 258.29603 382.19102 259.10192 385.38142 C
259.24195 385.93559 259.50557 386.75339 259.54838 387.26674 C
259.75134 387.26674 L
259.98803 386.24910 261.59556 383.98706 261.26532 380.37572 C
261.21430 379.81672 261.04394 379.39124 261.58592 379.15739 C
262.81474 378.62787 262.66507 381.41121 262.70022 382.09351 C
262.78894 383.81301 262.47600 385.57956 261.94507 387.12869 C
260.76472 390.57279 260.05153 388.89751 261.30132 391.80019 C
261.61002 392.51735 262.41307 394.59855 263.13477 395.03622 C
264.24680 395.64822 L
264.65981 395.85798 264.86306 396.01020 265.29364 396.22365 C
268.09682 397.61178 270.82942 398.69575 273.92400 399.55748 C
275.11342 399.88857 276.75241 400.44472 278.02573 400.62699 C
279.62447 400.75200 L
279.03515 399.87184 278.13061 398.91713 277.49424 398.01515 C
276.79266 397.02047 276.19994 396.07342 275.54825 394.99313 C
275.13609 394.30998 275.24069 393.90520 274.35373 393.75411 C
272.80006 393.48935 271.09502 391.55528 270.17065 390.43417 C
269.49685 389.61751 267.76431 386.74715 267.76006 385.53846 C
267.75723 384.73455 268.66630 384.52054 269.02687 385.39276 C
269.33357 386.13515 269.45887 386.38375 269.82028 387.03288 C
270.55644 388.35354 271.52334 389.41002 272.65918 390.37890 C
272.91969 390.60142 273.15071 390.76413 273.43928 390.91691 C
@c
341.47446 441.71518 m
343.96214 441.71518 343.50236 441.38835 343.50236 436.64542 C
343.50236 435.30775 342.04167 435.52998 341.27178 435.52998 C
340.72554 435.52998 340.25783 435.99288 340.25783 436.54422 C
340.25783 440.70123 L
340.25783 441.33562 340.81994 441.71518 341.47446 441.71518 C
@c
347.96353 441.71518 m
350.45150 441.71518 349.99143 441.38835 349.99143 436.64542 C
349.99143 435.07219 347.47455 435.46167 347.09131 435.77320 C
346.97169 435.87043 346.74690 436.17231 346.74690 436.34126 C
346.74690 440.70123 L
346.74690 441.33562 347.30929 441.71518 347.96353 441.71518 C
@c
354.24992 441.71518 m
356.88331 441.71518 356.48079 441.67266 356.48079 436.64542 C
356.48079 436.35940 356.30135 436.01698 356.15537 435.85540 C
355.75795 435.41490 354.99118 435.52998 354.24992 435.52998 C
352.73849 435.52998 353.13477 438.20844 353.13477 440.09291 C
353.13477 440.89795 353.47833 441.71518 354.24992 441.71518 C
@c
360.43540 441.71518 m
361.14463 441.86343 362.23370 441.73757 362.58803 441.43342 C
363.19039 440.91666 362.97978 437.95899 362.97468 437.04624 C
362.96135 434.61099 360.17887 435.66180 360.00624 435.81118 C
359.42088 436.31745 359.60060 439.31055 359.61959 440.19836 C
359.64312 441.27751 359.93055 441.30416 360.35915 441.64743 C
360.43540 441.71518 L
@c
367.22835 441.71518 m
369.84217 441.71518 369.45893 441.55361 369.45893 436.84838 C
369.45893 435.30605 368.20431 435.52998 367.22835 435.52998 C
366.51883 435.52998 366.11320 436.11506 366.11320 436.84838 C
366.11320 437.88728 365.93575 440.65928 366.37313 441.25257 C
366.54520 441.48614 366.86863 441.71518 367.22835 441.71518 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel18Dict 18.0 0
%%EOF
